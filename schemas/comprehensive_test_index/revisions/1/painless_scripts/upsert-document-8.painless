if (ctx._source.containsKey('metadata') == false) {
  ctx._source.metadata = new ArrayList();
}

if (ctx._source.containsKey('access_controls') == false) {
  ctx._source.access_controls = new ArrayList();
}

if (ctx._source.containsKey('chunks') == false) {
  ctx._source.chunks = new ArrayList();
}

if (ctx._source.containsKey('tags') == false) {
  ctx._source.tags = new ArrayList();
}

ctx._source.resource_id = params.document.resource_id;
ctx._source.resource_type = params.document.resource_type;
ctx._source.organization_id = params.document.organization_id;
if (params.document.updated_at != null) {
  ctx._source.updated_at = params.document.updated_at;
}

// Handle soft deletion by setting deleted_at if provided
if (params.document.deleted_at != null) {
  ctx._source.deleted_at = params.document.deleted_at;
}

// Handle chunks updates
if (params.document.chunks != null && params.document.chunks.size() > 0) {
  ctx._source.chunks = params.document.chunks;
}

// Handle chunks appending (for large document batching)
if (params.document.append_chunks != null && params.document.append_chunks.size() > 0) {
  for (chunk in params.document.append_chunks) {
    ctx._source.chunks.add(chunk);
  }
}

// Handle explicit chunk removal
if (params.document.remove_chunks != null && params.document.remove_chunks == true) {
  ctx._source.chunks = new ArrayList();
}

// Handle metadata updates
if (params.document.metadata != null && params.document.metadata.size() > 0) {
  Map existing = new HashMap();
  for (int i = 0; i < ctx._source.metadata.size(); i++) {
    existing.put(ctx._source.metadata[i].field_name, i);
  }

  for (item in params.document.metadata) {
    if (existing.containsKey(item.field_name)) {
      ctx._source.metadata[existing.get(item.field_name)] = item;
    } else {
      ctx._source.metadata.add(item);
    }
  }
}

// Handle explicit metadata removal
if (params.document.remove_metadata != null && params.document.remove_metadata == true) {
  ctx._source.metadata = new ArrayList();
}

if (params.document.add_access_controls != null) {
  for (access_control in params.document.add_access_controls) {
    if (!ctx._source.access_controls.contains(access_control)) {
      ctx._source.access_controls.add(access_control);
    }
  }
}

if (params.document.remove_access_controls != null) {
  ctx._source.access_controls.removeIf(access_control ->
      params.document.remove_access_controls.contains(access_control));
}

// Handle tags updates
if (params.document.add_tags != null) {
  // Create a map of existing tags by id for efficient lookup
  Map existingTags = new HashMap();
  for (int i = 0; i < ctx._source.tags.size(); i++) {
    existingTags.put(ctx._source.tags[i].id, i);
  }

  // Add or update tags
  for (tag in params.document.add_tags) {
    if (existingTags.containsKey(tag.id)) {
      // Update existing tag
      ctx._source.tags[existingTags.get(tag.id)] = tag;
    } else {
      // Add new tag
      ctx._source.tags.add(tag);
    }
  }
}

if (params.document.remove_tags != null && params.document.remove_tags.size() > 0) {
  // Use traditional loop instead of removeIf for better compatibility
  List tagsToKeep = new ArrayList();
  for (int i = 0; i < ctx._source.tags.size(); i++) {
    Map tag = ctx._source.tags[i];
    String tagId = tag.get('id');
    if (tagId != null && !params.document.remove_tags.contains(tagId)) {
      tagsToKeep.add(tag);
    }
  }
  ctx._source.tags = tagsToKeep;
}
