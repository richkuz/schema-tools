require_relative 'json_diff'

module SchemaTools
  # Diff schema_revision against the previous revision (including previous indexes)
  # Store the output in diff_output.txt

  DIFF_OUTPUT_HEADER = """THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT THIS BY HAND.
===============================================================
"""

  def self.diff(schema_revision:)
    raise "schema_revision required" unless schema_revision
    
    previous_schema_revision = SchemaRevision.find_previous_revision_across_indexes(schema_revision)

    current_files = SchemaFiles.get_revision_files(schema_revision)
    previous_files = previous_schema_revision ? SchemaFiles.get_revision_files(previous_schema_revision) : { settings: {}, mappings: {} }
    
    diff_content = []

    diff_content << DIFF_OUTPUT_HEADER
    
    if previous_schema_revision
      diff_content << "Diff between current revision #{schema_revision.revision_relative_path} and previous revision #{previous_schema_revision.revision_relative_path}"
    else
      diff_content << "Diff between current revision #{schema_revision.revision_relative_path} and empty baseline"
    end
    diff_content << ""
    
    json_diff = JsonDiff.new()
    diff_content << "=== Settings Diff ==="
    diff_content << json_diff.generate_diff(previous_files[:settings], current_files[:settings])
    
    diff_content << "\n=== Mappings Diff ==="
    diff_content << json_diff.generate_diff(previous_files[:mappings], current_files[:mappings])
    
    
    diff_content = diff_content.join("\n")
    diff_output_path = File.join(schema_revision.revision_absolute_path, 'diff_output.txt')
    File.write(diff_output_path, diff_content)
    puts "Wrote diff output to #{diff_output_path}"
    
    diff_content
  end


end
